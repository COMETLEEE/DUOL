//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
    float3  gEmitPosW;                  // Offset:   16, size:   12
    float3  gEmitDirW;                  // Offset:   32, size:   12
    float   gGameTime;                  // Offset:   44, size:    4
    float   gTimeStep;                  // Offset:   48, size:    4
    float4x4 gViewProj;                 // Offset:   64, size:   64
}

cbuffer cbFixed
{
    float3  gAccelW = { 0, 7.80000019, 0 };// Offset:    0, size:   12
    float2  gQuadTexC[4] = { 0, 1, 1, 1, 0, 0, 1, 0 };// Offset:   16, size:   56
}

//
// 7 local object(s)
//
Texture2DArray gTexArray;
Texture1D gRandomTex;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState NoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
GeometryShader gsStreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   float3 gEyePosW;                   // Offset:    0 Size:    12 [unused]
        //   float3 gEmitPosW;                  // Offset:   16 Size:    12
        //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
        //   float gGameTime;                   // Offset:   44 Size:     4
        //   float gTimeStep;                   // Offset:   48 Size:     4
        //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // samLinear                         sampler      NA          NA             s0      1 
        // gRandomTex                        texture  float4          1d             t0      1 
        // cbPerFrame                        cbuffer      NA          NA            cb0      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed | skipOptimization
        dcl_constantbuffer CB0[4], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xy
        dcl_input v[1][2].z
        dcl_input v[1][3].x
        dcl_temps 3
        dcl_inputprimitive point 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xy
        dcl_output o2.z
        dcl_output o3.x
        dcl_maxout 2
        //
        // Initial variable locations:
        //   m0 <- ptStream; 
        //   v[0][0].x <- gin[0].InitialPosW.x; v[0][0].y <- gin[0].InitialPosW.y; v[0][0].z <- gin[0].InitialPosW.z; 
        //   v[0][1].x <- gin[0].InitialVelW.x; v[0][1].y <- gin[0].InitialVelW.y; v[0][1].z <- gin[0].InitialVelW.z; 
        //   v[0][2].x <- gin[0].SizeW.x; v[0][2].y <- gin[0].SizeW.y; v[0][2].z <- gin[0].Age; 
        //   v[0][3].x <- gin[0].Type
        //
        #line 101 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\BasicParticle.fx"
        add r0.x, cb0[3].x, v[0][2].z  // r0.x <- gin[0].Age
        
        #line 103
        if_z v[0][3].x
        
        #line 106
          lt r0.y, l(0.001000), r0.x
          if_nz r0.y
        
        #line 108
            nop 
            mov r0.y, l(0)
        
        #line 68
            add r0.y, r0.y, cb0[2].w  // r0.y <- u
        
        #line 71
            itof r0.z, l(0)
            sample_l_indexable(texture1d)(float,float,float,float) r0.yzw, r0.y, t0.wxyz, s0, r0.z  // r0.y <- v.x; r0.z <- v.y; r0.w <- v.z
        
        #line 73
            dp3 r1.x, r0.yzwy, r0.yzwy
            rsq r1.x, r1.x
            mul r0.yzw, r0.yyzw, r1.xxxx  // r0.y <- <RandUnitVec3 return value>.x; r0.z <- <RandUnitVec3 return value>.y; r0.w <- <RandUnitVec3 return value>.z
        
        #line 108
            mov r0.yzw, r0.yyzw  // r0.y <- vRandom.x; r0.z <- vRandom.y; r0.w <- vRandom.z
        
        #line 109
            mul r0.y, r0.y, l(0.500000)
        
        #line 110
            mul r0.w, r0.w, l(0.500000)
        
        #line 113
            mov r1.xyz, cb0[1].xyzx  // r1.x <- p.InitialPosW.x; r1.y <- p.InitialPosW.y; r1.z <- p.InitialPosW.z
        
        #line 114
            mul r0.yzw, r0.yyzw, l(0.000000, 4.000000, 4.000000, 4.000000)  // r0.y <- p.InitialVelW.x; r0.z <- p.InitialVelW.y; r0.w <- p.InitialVelW.z
        
        #line 115
            mov r2.xy, l(3.000000,3.000000,0,0)  // r2.x <- p.SizeW.x; r2.y <- p.SizeW.y
        
        #line 116
            mov r1.w, l(0)  // r1.w <- p.Age
        
        #line 117
            mov r2.z, l(1)  // r2.z <- p.Type
        
        #line 119
            mov o0.xyz, r1.xyzx
            mov o1.xyz, r0.yzwy
            mov o2.xy, r2.xyxx
            mov o2.z, r1.w
            mov o3.x, r2.z
            emit_stream m0
        
        #line 122
            mov r0.x, l(0)
        
        #line 123
          endif 
        
        #line 126
          mov o0.xyz, v[0][0].xyzx
          mov o1.xyz, v[0][1].xyzx
          mov o2.xy, v[0][2].xyxx
          mov o2.z, r0.x
          mov o3.x, v[0][3].x
          emit_stream m0
        
        #line 127
        else 
        
        #line 131
          ge r0.y, l(4.000000), r0.x
          if_nz r0.y
        
        #line 132
            mov o0.xyz, v[0][0].xyzx
            mov o1.xyz, v[0][1].xyzx
            mov o2.xy, v[0][2].xyxx
            mov o2.z, r0.x
            mov o3.x, v[0][3].x
            emit_stream m0
          endif 
        
        #line 133
        endif 
        
        #line 134
        ret 
        // Approximately 46 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; VELOCITY.xyz; SIZE.xy; AGE.x; TYPE.x" */;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 StreamOutTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0     z         2     NONE   float     z 
                // TYPE                     0   x           3     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_output o3.x
                //
                // Initial variable locations:
                //   v0.x <- vin.InitialPosW.x; v0.y <- vin.InitialPosW.y; v0.z <- vin.InitialPosW.z; 
                //   v1.x <- vin.InitialVelW.x; v1.y <- vin.InitialVelW.y; v1.z <- vin.InitialVelW.z; 
                //   v2.x <- vin.SizeW.x; v2.y <- vin.SizeW.y; 
                //   v3.x <- vin.Age; 
                //   v4.x <- vin.Type; 
                //   o3.x <- <StreamOutVS return value>.Type; 
                //   o2.x <- <StreamOutVS return value>.SizeW.x; o2.y <- <StreamOutVS return value>.SizeW.y; o2.z <- <StreamOutVS return value>.Age; 
                //   o1.x <- <StreamOutVS return value>.InitialVelW.x; o1.y <- <StreamOutVS return value>.InitialVelW.y; o1.z <- <StreamOutVS return value>.InitialVelW.z; 
                //   o0.x <- <StreamOutVS return value>.InitialPosW.x; o0.y <- <StreamOutVS return value>.InitialPosW.y; o0.z <- <StreamOutVS return value>.InitialPosW.z
                //
                #line 94 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\BasicParticle.fx"
                mov o0.xyz, v0.xyzx
                mov o1.xyz, v1.xyzx
                mov o2.xy, v2.xyxx
                mov o2.z, v3.x
                mov o3.x, v4.x
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = gsStreamOut;
            PixelShader = NULL;
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

    }

    technique11 DrawTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbFixed
                // {
                //
                //   float3 gAccelW;                    // Offset:    0 Size:    12
                //      = 0x00000000 0x40f9999a 0x00000000 
                //   float2 gQuadTexC[4];               // Offset:   16 Size:    56 [unused]
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbFixed                           cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TYPE                     0   x           3     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_output o3.x
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.InitialPosW.x; v0.y <- vin.InitialPosW.y; v0.z <- vin.InitialPosW.z; 
                //   v1.x <- vin.InitialVelW.x; v1.y <- vin.InitialVelW.y; v1.z <- vin.InitialVelW.z; 
                //   v2.x <- vin.SizeW.x; v2.y <- vin.SizeW.y; 
                //   v3.x <- vin.Age; 
                //   v4.x <- vin.Type; 
                //   o3.x <- <DrawVS return value>.Type; 
                //   o2.x <- <DrawVS return value>.Color.x; o2.y <- <DrawVS return value>.Color.y; o2.z <- <DrawVS return value>.Color.z; o2.w <- <DrawVS return value>.Color.w; 
                //   o1.x <- <DrawVS return value>.SizeW.x; o1.y <- <DrawVS return value>.SizeW.y; 
                //   o0.x <- <DrawVS return value>.PosW.x; o0.y <- <DrawVS return value>.PosW.y; o0.z <- <DrawVS return value>.PosW.z
                //
                #line 167 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\BasicParticle.fx"
                mov r0.x, v3.x  // r0.x <- t
                
                #line 170
                mul r0.y, r0.x, l(0.500000)
                mul r0.y, r0.x, r0.y
                mul r0.yzw, r0.yyyy, cb0[0].xxyz
                mul r1.xyz, r0.xxxx, v1.xyzx
                add r0.yzw, r0.yyzw, r1.xxyz
                add r0.yzw, r0.yyzw, v0.xxyz  // r0.y <- vout.PosW.x; r0.z <- vout.PosW.y; r0.w <- vout.PosW.z
                
                #line 173
                div r0.x, r0.x, l(1.000000)
                mov r1.x, l(-0.000000)
                add r1.y, r1.x, l(1.000000)
                add r0.x, r0.x, r1.x
                div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
                mul r0.x, r0.x, r1.x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r1.x, r0.x, l(-2.000000)
                add r1.x, r1.x, l(3.000000)
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r1.x
                mov r0.x, -r0.x
                add r1.w, r0.x, l(1.000000)  // r1.w <- opacity
                
                #line 174
                mov r1.xyz, l(1.000000,1.000000,1.000000,0)
                mov r1.xyzw, r1.xyzw  // r1.x <- vout.Color.x; r1.y <- vout.Color.y; r1.z <- vout.Color.z; r1.w <- vout.Color.w
                
                #line 176
                mov r2.xy, v2.xyxx  // r2.x <- vout.SizeW.x; r2.y <- vout.SizeW.y
                
                #line 177
                mov r0.x, v4.x  // r0.x <- vout.Type
                
                #line 179
                mov o2.xyzw, r1.xyzw
                mov o0.xyz, r0.yzwy
                mov o1.xy, r2.xyxx
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //   float3 gEmitPosW;                  // Offset:   16 Size:    12 [unused]
                //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
                //   float gGameTime;                   // Offset:   44 Size:     4 [unused]
                //   float gTimeStep;                   // Offset:   48 Size:     4 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float3 gAccelW;                    // Offset:    0 Size:    12 [unused]
                //      = 0x00000000 0x40f9999a 0x00000000 
                //   float2 gQuadTexC[4];               // Offset:   16 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbFixed                           cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // SIZE                     0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TYPE                     0   x           3     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_constantbuffer CB1[5], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input v[1][2].xyzw
                dcl_input v[1][3].x
                dcl_temps 4
                dcl_indexableTemp x0[4], 4
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_maxout 4
                //
                // Initial variable locations:
                //   m0 <- triStream; 
                //   v[0][0].x <- gin[0].PosW.x; v[0][0].y <- gin[0].PosW.y; v[0][0].z <- gin[0].PosW.z; 
                //   v[0][1].x <- gin[0].SizeW.x; v[0][1].y <- gin[0].SizeW.y; 
                //   v[0][2].x <- gin[0].Color.x; v[0][2].y <- gin[0].Color.y; v[0][2].z <- gin[0].Color.z; v[0][2].w <- gin[0].Color.w; 
                //   v[0][3].x <- gin[0].Type; 
                //   x0 <- v
                //
                #line 195 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\BasicParticle.fx"
                if_nz v[0][3].x
                
                #line 200
                  mov r0.xyz, -v[0][0].zxyz
                  add r0.xyz, r0.xyzx, cb0[0].zxyz
                  dp3 r0.w, r0.xyzx, r0.xyzx
                  rsq r0.w, r0.w
                  mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- look.z; r0.y <- look.x; r0.z <- look.y
                
                #line 201
                  itof r1.xyz, l(0, 0, 1, 0)
                  mul r2.xyz, r0.xyzx, r1.zxyz
                  mul r1.xyz, r0.zxyz, r1.xyzx
                  mov r1.xyz, -r1.xyzx
                  add r1.xyz, r1.xyzx, r2.xyzx
                  dp3 r0.w, r1.xyzx, r1.xyzx
                  rsq r0.w, r0.w
                  mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- right.x; r1.y <- right.y; r1.z <- right.z
                
                #line 202
                  mul r2.xyz, r0.zxyz, r1.zxyz
                  mul r0.xyz, r0.xyzx, r1.yzxy
                  mov r0.xyz, -r0.xyzx
                  add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- up.x; r0.y <- up.y; r0.z <- up.z
                
                #line 204
                  mul r0.w, l(0.500000), v[0][1].x  // r0.w <- halfWidth
                
                #line 205
                  mul r1.w, l(0.500000), v[0][1].y  // r1.w <- halfHeight
                
                #line 208
                  mul r2.xyz, r1.xyzx, r0.wwww
                  add r2.xyz, r2.xyzx, v[0][0].xyzx
                  mul r3.xyz, r0.xyzx, r1.wwww
                  mov r3.xyz, -r3.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx
                  mov r2.w, l(1.000000)
                  mov x0[0].xyzw, r2.xyzw
                
                #line 209
                  mul r2.xyz, r1.xyzx, r0.wwww
                  add r2.xyz, r2.xyzx, v[0][0].xyzx
                  mul r3.xyz, r0.xyzx, r1.wwww
                  add r2.xyz, r2.xyzx, r3.xyzx
                  mov r2.w, l(1.000000)
                  mov x0[1].xyzw, r2.xyzw
                
                #line 210
                  mul r2.xyz, r1.xyzx, r0.wwww
                  mov r2.xyz, -r2.xyzx
                  add r2.xyz, r2.xyzx, v[0][0].xyzx
                  mul r3.xyz, r0.xyzx, r1.wwww
                  mov r3.xyz, -r3.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx
                  mov r2.w, l(1.000000)
                  mov x0[2].xyzw, r2.xyzw
                
                #line 211
                  mul r1.xyz, r1.xyzx, r0.wwww
                  mov r1.xyz, -r1.xyzx
                  add r1.xyz, r1.xyzx, v[0][0].xyzx
                  mul r0.xyz, r0.xyzx, r1.wwww
                  add r0.xyz, r0.xyzx, r1.xyzx
                  mov r0.w, l(1.000000)
                  mov x0[3].xyzw, r0.xyzw
                
                #line 218
                  mov r0.xyzw, x0[0].xyzw
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- gout.PosH.x
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- gout.PosH.y
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- gout.PosH.z
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- gout.PosH.w
                
                #line 219
                  mov r0.xy, cb1[1].xyxx  // r0.x <- gout.Tex.x; r0.y <- gout.Tex.y
                
                #line 220
                  mov r2.xyzw, v[0][2].xyzw  // r2.x <- gout.Color.x; r2.y <- gout.Color.y; r2.z <- gout.Color.z; r2.w <- gout.Color.w
                
                #line 221
                  mov o0.xyzw, r1.xyzw
                  mov o1.xyzw, r2.xyzw
                  mov o2.xy, r0.xyxx
                  emit_stream m0
                
                #line 218
                  mov r0.xyzw, x0[1].xyzw
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw
                
                #line 219
                  mov r0.xy, cb1[2].xyxx  // r0.x <- gout.Tex.x; r0.y <- gout.Tex.y
                
                #line 220
                  mov r2.xyzw, v[0][2].xyzw
                
                #line 221
                  mov o0.xyzw, r1.xyzw
                  mov o1.xyzw, r2.xyzw
                  mov o2.xy, r0.xyxx
                  emit_stream m0
                
                #line 218
                  mov r0.xyzw, x0[2].xyzw
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw
                
                #line 219
                  mov r0.xy, cb1[3].xyxx  // r0.x <- gout.Tex.x; r0.y <- gout.Tex.y
                
                #line 220
                  mov r2.xyzw, v[0][2].xyzw
                
                #line 221
                  mov o0.xyzw, r1.xyzw
                  mov o1.xyzw, r2.xyzw
                  mov o2.xy, r0.xyxx
                  emit_stream m0
                
                #line 218
                  mov r0.xyzw, x0[3].xyzw
                  dp4 r1.x, r0.xyzw, cb0[4].xyzw
                  dp4 r1.y, r0.xyzw, cb0[5].xyzw
                  dp4 r1.z, r0.xyzw, cb0[6].xyzw
                  dp4 r1.w, r0.xyzw, cb0[7].xyzw
                
                #line 219
                  mov r0.xy, cb1[4].xyxx  // r0.x <- gout.Tex.x; r0.y <- gout.Tex.y
                
                #line 220
                  mov r2.xyzw, v[0][2].xyzw
                
                #line 221
                  mov o0.xyzw, r1.xyzw
                  mov o1.xyzw, r2.xyzw
                  mov o2.xy, r0.xyxx
                  emit_stream m0
                
                #line 223
                endif 
                
                #line 224
                ret 
                // Approximately 94 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gTexArray                         texture  float4     2darray             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xy
                dcl_output o3.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Color.x; v1.y <- pin.Color.y; v1.z <- pin.Color.z; v1.w <- pin.Color.w; 
                //   v2.x <- pin.Tex.x; v2.y <- pin.Tex.y; 
                //   o3.x <- <DrawPS return value>.x; o3.y <- <DrawPS return value>.y; o3.z <- <DrawPS return value>.z; o3.w <- <DrawPS return value>.w
                //
                #line 228 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\BasicParticle.fx"
                itof r0.z, l(0)
                mov r0.xy, v2.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mul o3.xyzw, r0.xyzw, v1.xyzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = AdditiveBlending;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthWrites;
        }

    }

}

