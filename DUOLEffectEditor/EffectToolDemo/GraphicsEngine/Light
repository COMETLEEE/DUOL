//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer $Globals
{
    float4x4 gLightWorldViewProj;       // Offset:    0, size:   64
}

cbuffer cbSkinned
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldlnvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    Material gMaterial;                 // Offset:  192, size:   64
}

//
// 4 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap;
TextureCube gCubeMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 TextureLightTech
    {
        pass P1
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbSkinned                         cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // WEIGHT                   0   xyz         4     NONE   float   xyz 
                // BONEINDEX                0   xyzw        5     NONE    uint   xyzw
                // TANGENT                  0   xyz         6     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_input v6.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_output o3.xy
                dcl_output o4.xyz
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.Tex.x; v1.y <- vin.Tex.y; 
                //   v2.x <- vin.NormalL.x; v2.y <- vin.NormalL.y; v2.z <- vin.NormalL.z; 
                //   v3.x <- vin.Color.x; v3.y <- vin.Color.y; v3.z <- vin.Color.z; v3.w <- vin.Color.w; 
                //   v4.x <- vin.BoneWeight.x; v4.y <- vin.BoneWeight.y; v4.z <- vin.BoneWeight.z; 
                //   v5.x <- vin.BoneIndex.x; v5.y <- vin.BoneIndex.y; v5.z <- vin.BoneIndex.z; v5.w <- vin.BoneIndex.w; 
                //   v6.x <- vin.tangent.x; v6.y <- vin.tangent.y; v6.z <- vin.tangent.z; 
                //   o4.x <- <VS return value>.tangent.x; o4.y <- <VS return value>.tangent.y; o4.z <- <VS return value>.tangent.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.Color.x; o2.y <- <VS return value>.Color.y; o2.z <- <VS return value>.Color.z; o2.w <- <VS return value>.Color.w; 
                //   o1.x <- <VS return value>.NormalL.x; o1.y <- <VS return value>.NormalL.y; o1.z <- <VS return value>.NormalL.z; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z; 
                //   x0 <- weights
                //
                #line 39 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                mov r0.xyz, l(0,0,0,0)  // r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z
                
                #line 40
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalL.x; r1.y <- normalL.y; r1.z <- normalL.z
                
                #line 43
                mov x0[0].x, v4.x
                
                #line 44
                mov x0[1].x, v4.y
                
                #line 45
                mov x0[2].x, v4.z
                
                #line 46
                mov r0.w, -v4.x
                add r0.w, r0.w, l(1.000000)
                mov r1.w, -v4.y
                add r0.w, r0.w, r1.w
                mov r1.w, -v4.z
                add r0.w, r0.w, r1.w
                mov x0[3].x, r0.w
                
                #line 48
                mov r0.w, x0[0].x
                itof r1.w, l(0)
                lt r0.w, r1.w, r0.w
                if_nz r0.w
                
                #line 50
                  mov r0.w, l(0)  // r0.w <- i
                  mov r2.xyz, r0.xyzx  // r2.x <- posL.x; r2.y <- posL.y; r2.z <- posL.z
                  mov r3.xyz, r1.xyzx  // r3.x <- normalL.x; r3.y <- normalL.y; r3.z <- normalL.z
                  mov r1.w, r0.w  // r1.w <- i
                  loop 
                    ilt r2.w, r1.w, l(4)
                    breakc_z r2.w
                
                #line 52
                    mov r2.w, x0[r1.w + 0].x
                    ge r2.w, l(0.000100), r2.w
                    if_nz r2.w
                
                #line 53
                      break 
                    endif 
                
                #line 54
                    mov r2.w, x0[r1.w + 0].x
                    and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                    or r4.xy, r4.ywyy, r4.xzxx
                    or r3.w, r4.y, r4.x
                    imul null, r3.w, r3.w, l(4)
                    mov r4.xyz, v0.xyzx
                    mov r4.w, l(1.000000)
                    dp4 r5.x, r4.xyzw, cb0[r3.w + 0].xyzw
                    dp4 r5.y, r4.xyzw, cb0[r3.w + 1].xyzw
                    dp4 r5.z, r4.xyzw, cb0[r3.w + 2].xyzw
                    mul r4.xyz, r2.wwww, r5.xyzx
                    add r2.xyz, r2.xyzx, r4.xyzx
                
                #line 55
                    mov r2.w, x0[r1.w + 0].x
                    and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                    or r4.xy, r4.ywyy, r4.xzxx
                    or r3.w, r4.y, r4.x
                    imul null, r3.w, r3.w, l(4)
                    dp3 r4.x, v2.xyzx, cb0[r3.w + 0].xyzx
                    dp3 r4.y, v2.xyzx, cb0[r3.w + 1].xyzx
                    dp3 r4.z, v2.xyzx, cb0[r3.w + 2].xyzx
                    mul r4.xyz, r2.wwww, r4.xyzx
                    add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 50
                    iadd r1.w, r1.w, l(1)
                
                #line 56
                  endloop 
                
                #line 57
                else   // Prior locations: r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z; r1.x <- normalL.x; r1.y <- normalL.y; r1.z <- normalL.z
                
                #line 60
                  mov r2.xyz, v0.xyzx  // r2.x <- posL.x; r2.y <- posL.y; r2.z <- posL.z
                
                #line 61
                  mov r3.xyz, v2.xyzx  // r3.x <- normalL.x; r3.y <- normalL.y; r3.z <- normalL.z
                
                #line 62
                endif 
                
                #line 74
                mov r2.xyz, r2.xyzx  // r2.x <- vout.PosL.x; r2.y <- vout.PosL.y; r2.z <- vout.PosL.z
                
                #line 75
                mov r3.xyz, r3.xyzx  // r3.x <- vout.NormalL.x; r3.y <- vout.NormalL.y; r3.z <- vout.NormalL.z
                
                #line 76
                mov r0.xyzw, v3.xyzw  // r0.x <- vout.Color.x; r0.y <- vout.Color.y; r0.z <- vout.Color.z; r0.w <- vout.Color.w
                
                #line 77
                mov r1.xy, v1.xyxx  // r1.x <- vout.Tex.x; r1.y <- vout.Tex.y
                
                #line 78
                mov r4.xyz, v6.xyzx  // r4.x <- vout.tangent.x; r4.y <- vout.tangent.y; r4.z <- vout.tangent.z
                
                #line 80
                mov o2.xyzw, r0.xyzw
                mov o0.xyz, r2.xyzx
                mov o1.xyz, r3.xyzx
                mov o4.xyz, r4.xyzx
                mov o3.xy, r1.xyxx
                ret 
                // Approximately 67 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldlnvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyzw
                dcl_input v[3][3].xy
                dcl_input v[3][4].xyz
                dcl_temps 6
                dcl_indexableTemp x0[36], 4
                dcl_inputprimitive triangle 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_maxout 6
                //
                // Initial variable locations:
                //   m0 <- triStream; 
                //   v[0][0].x <- gin[0].PosL.x; v[0][0].y <- gin[0].PosL.y; v[0][0].z <- gin[0].PosL.z; 
                //   v[0][1].x <- gin[0].NormalL.x; v[0][1].y <- gin[0].NormalL.y; v[0][1].z <- gin[0].NormalL.z; 
                //   v[0][2].x <- gin[0].Color.x; v[0][2].y <- gin[0].Color.y; v[0][2].z <- gin[0].Color.z; v[0][2].w <- gin[0].Color.w; 
                //   v[0][3].x <- gin[0].Tex.x; v[0][3].y <- gin[0].Tex.y; 
                //   v[0][4].x <- gin[0].tangent.x; v[0][4].y <- gin[0].tangent.y; v[0][4].z <- gin[0].tangent.z; 
                //   v[1][0].x <- gin[1].PosL.x; v[1][0].y <- gin[1].PosL.y; v[1][0].z <- gin[1].PosL.z; 
                //   v[1][1].x <- gin[1].NormalL.x; v[1][1].y <- gin[1].NormalL.y; v[1][1].z <- gin[1].NormalL.z; 
                //   v[1][2].x <- gin[1].Color.x; v[1][2].y <- gin[1].Color.y; v[1][2].z <- gin[1].Color.z; v[1][2].w <- gin[1].Color.w; 
                //   v[1][3].x <- gin[1].Tex.x; v[1][3].y <- gin[1].Tex.y; 
                //   v[1][4].x <- gin[1].tangent.x; v[1][4].y <- gin[1].tangent.y; v[1][4].z <- gin[1].tangent.z; 
                //   v[2][0].x <- gin[2].PosL.x; v[2][0].y <- gin[2].PosL.y; v[2][0].z <- gin[2].PosL.z; 
                //   v[2][1].x <- gin[2].NormalL.x; v[2][1].y <- gin[2].NormalL.y; v[2][1].z <- gin[2].NormalL.z; 
                //   v[2][2].x <- gin[2].Color.x; v[2][2].y <- gin[2].Color.y; v[2][2].z <- gin[2].Color.z; v[2][2].w <- gin[2].Color.w; 
                //   v[2][3].x <- gin[2].Tex.x; v[2][3].y <- gin[2].Tex.y; 
                //   v[2][4].x <- gin[2].tangent.x; v[2][4].y <- gin[2].tangent.y; v[2][4].z <- gin[2].tangent.z; 
                //   x0 <- gout
                //
                #line 130 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[0][1].xyzx
                add r0.xyz, r0.xyzx, v[0][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw
                dp4 r1.y, r0.xyzw, cb0[9].xyzw
                dp4 r1.z, r0.xyzw, cb0[10].xyzw
                dp4 r1.w, r0.xyzw, cb0[11].xyzw
                mov x0[0].xyzw, r1.xyzw
                
                #line 131
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[0][1].xyzx
                add r0.xyz, r0.xyzx, v[0][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                mov x0[1].xyz, r1.xyzx
                
                #line 132
                dp3 r0.x, v[0][1].xyzx, cb0[4].xyzx
                dp3 r0.y, v[0][1].xyzx, cb0[5].xyzx
                dp3 r0.z, v[0][1].xyzx, cb0[6].xyzx
                mov x0[2].xyz, r0.xyzx
                
                #line 133
                mov x0[3].xyzw, v[0][2].xyzw
                
                #line 134
                mov x0[4].xy, v[0][3].xyxx
                
                #line 135
                mov x0[5].xyz, v[0][4].xyzx
                
                #line 130
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[1][1].xyzx
                add r0.xyz, r0.xyzx, v[1][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw
                dp4 r1.y, r0.xyzw, cb0[9].xyzw
                dp4 r1.z, r0.xyzw, cb0[10].xyzw
                dp4 r1.w, r0.xyzw, cb0[11].xyzw
                mov x0[6].xyzw, r1.xyzw
                
                #line 131
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[1][1].xyzx
                add r0.xyz, r0.xyzx, v[1][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                mov x0[7].xyz, r1.xyzx
                
                #line 132
                dp3 r0.x, v[1][1].xyzx, cb0[4].xyzx
                dp3 r0.y, v[1][1].xyzx, cb0[5].xyzx
                dp3 r0.z, v[1][1].xyzx, cb0[6].xyzx
                mov x0[8].xyz, r0.xyzx
                
                #line 133
                mov x0[9].xyzw, v[1][2].xyzw
                
                #line 134
                mov x0[10].xy, v[1][3].xyxx
                
                #line 135
                mov x0[11].xyz, v[1][4].xyzx
                
                #line 130
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[2][1].xyzx
                add r0.xyz, r0.xyzx, v[2][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw
                dp4 r1.y, r0.xyzw, cb0[9].xyzw
                dp4 r1.z, r0.xyzw, cb0[10].xyzw
                dp4 r1.w, r0.xyzw, cb0[11].xyzw
                mov x0[12].xyzw, r1.xyzw
                
                #line 131
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[2][1].xyzx
                add r0.xyz, r0.xyzx, v[2][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                mov x0[13].xyz, r1.xyzx
                
                #line 132
                dp3 r0.x, v[2][1].xyzx, cb0[4].xyzx
                dp3 r0.y, v[2][1].xyzx, cb0[5].xyzx
                dp3 r0.z, v[2][1].xyzx, cb0[6].xyzx
                mov x0[14].xyz, r0.xyzx
                
                #line 133
                mov x0[15].xyzw, v[2][2].xyzw
                
                #line 134
                mov x0[16].xy, v[2][3].xyxx
                
                #line 135
                mov x0[17].xyz, v[2][4].xyzx
                
                #line 138
                mov r0.x, l(0)  // r0.x <- j
                mov r0.y, r0.x  // r0.y <- j
                loop 
                  ilt r0.z, r0.y, l(3)
                  breakc_z r0.z
                
                #line 140
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  add r1.xyz, l(100.000000, 0.000000, 0.000000, 0.000000), v[r0.y + 0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[8].xyzw
                  dp4 r2.y, r1.xyzw, cb0[9].xyzw
                  dp4 r2.z, r1.xyzw, cb0[10].xyzw
                  dp4 r2.w, r1.xyzw, cb0[11].xyzw
                  mov x0[r0.z + 0].xyzw, r2.xyzw
                
                #line 141
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  add r1.xyz, l(100.000000, 0.000000, 0.000000, 0.000000), v[r0.y + 0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[0].xyzw
                  dp4 r2.y, r1.xyzw, cb0[1].xyzw
                  dp4 r2.z, r1.xyzw, cb0[2].xyzw
                  mov x0[r0.z + 1].xyz, r2.xyzx
                
                #line 142
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  dp3 r1.x, v[r0.y + 0][1].xyzx, cb0[4].xyzx
                  dp3 r1.y, v[r0.y + 0][1].xyzx, cb0[5].xyzx
                  dp3 r1.z, v[r0.y + 0][1].xyzx, cb0[6].xyzx
                  mov x0[r0.z + 2].xyz, r1.xyzx
                
                #line 143
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  mov x0[r0.z + 3].xyzw, v[r0.y + 0][2].xyzw
                
                #line 144
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  mov x0[r0.z + 4].xy, v[r0.y + 0][3].xyxx
                
                #line 145
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  mov x0[r0.z + 5].xyz, v[r0.y + 0][4].xyzx
                
                #line 147
                  iadd r0.y, r0.y, l(1)
                endloop 
                
                #line 149
                mov r0.xyzw, x0[0].xyzw
                mov r1.xyz, x0[1].xyzx
                mov r2.xyz, x0[2].xyzx
                mov r3.xyzw, x0[3].xyzw
                mov r4.xy, x0[4].xyxx
                mov r5.xyz, x0[5].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 150
                mov r0.xyzw, x0[6].xyzw
                mov r1.xyz, x0[7].xyzx
                mov r2.xyz, x0[8].xyzx
                mov r3.xyzw, x0[9].xyzw
                mov r4.xy, x0[10].xyxx
                mov r5.xyz, x0[11].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 151
                mov r0.xyzw, x0[12].xyzw
                mov r1.xyz, x0[13].xyzx
                mov r2.xyz, x0[14].xyzx
                mov r3.xyzw, x0[15].xyzw
                mov r4.xy, x0[16].xyxx
                mov r5.xyz, x0[17].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 153
                cut_stream m0
                
                #line 155
                mov r0.xyzw, x0[18].xyzw
                mov r1.xyz, x0[19].xyzx
                mov r2.xyz, x0[20].xyzx
                mov r3.xyzw, x0[21].xyzw
                mov r4.xy, x0[22].xyxx
                mov r5.xyz, x0[23].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 156
                mov r0.xyzw, x0[24].xyzw
                mov r1.xyz, x0[25].xyzx
                mov r2.xyz, x0[26].xyzx
                mov r3.xyzw, x0[27].xyzw
                mov r4.xy, x0[28].xyxx
                mov r5.xyz, x0[29].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 157
                mov r0.xyzw, x0[30].xyzw
                mov r1.xyz, x0[31].xyzx
                mov r2.xyz, x0[32].xyzx
                mov r3.xyzw, x0[33].xyzw
                mov r4.xy, x0[34].xyxx
                mov r5.xyz, x0[35].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 159
                cut_stream m0
                
                #line 161
                ret 
                // Approximately 192 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldlnvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gCubeMap                          texture  float4        cube             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     z 
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                // SV_Target                1   xyzw        1   TARGET   float   xyzw
                // SV_Target                2   xyzw        2   TARGET   float   xyzw
                // SV_Target                3   xyzw        3   TARGET   float   xyzw
                // SV_Target                4   xyzw        4   TARGET   float   xyzw
                // SV_Target                5   xyzw        5   TARGET   float   xyzw
                // SV_Target                6   xyzw        6   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps_siv linear noperspective v0.z, position
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Color.x; v3.y <- pin.Color.y; v3.z <- pin.Color.z; v3.w <- pin.Color.w; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.tangent.x; v5.y <- pin.tangent.y; v5.z <- pin.tangent.z; 
                //   o6.x <- <PS return value>.Ambient.x; o6.y <- <PS return value>.Ambient.y; o6.z <- <PS return value>.Ambient.z; o6.w <- <PS return value>.Ambient.w; 
                //   o5.x <- <PS return value>.Specular.x; o5.y <- <PS return value>.Specular.y; o5.z <- <PS return value>.Specular.z; o5.w <- <PS return value>.Specular.w; 
                //   o4.x <- <PS return value>.Diffuse.x; o4.y <- <PS return value>.Diffuse.y; o4.z <- <PS return value>.Diffuse.z; o4.w <- <PS return value>.Diffuse.w; 
                //   o3.x <- <PS return value>.Albedo.x; o3.y <- <PS return value>.Albedo.y; o3.z <- <PS return value>.Albedo.z; o3.w <- <PS return value>.Albedo.w; 
                //   o2.x <- <PS return value>.Position.x; o2.y <- <PS return value>.Position.y; o2.z <- <PS return value>.Position.z; o2.w <- <PS return value>.Position.w; 
                //   o1.x <- <PS return value>.Normal.x; o1.y <- <PS return value>.Normal.y; o1.z <- <PS return value>.Normal.z; o1.w <- <PS return value>.Normal.w; 
                //   o0.x <- <PS return value>.Depth.x; o0.y <- <PS return value>.Depth.y; o0.z <- <PS return value>.Depth.z; o0.w <- <PS return value>.Depth.w
                //
                #line 86 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 87
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[0].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- toEyeW.x; r1.y <- toEyeW.y; r1.z <- toEyeW.z
                
                #line 93
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 102
                mov r0.xyz, r0.xyzx  // r0.x <- NormalW.x; r0.y <- NormalW.y; r0.z <- NormalW.z
                
                #line 106
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 107
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r0.xyzx, r1.wwww
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 108
                sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r1.xyzx, t1.xyzw, s0  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z; r1.w <- reflectionColor.w
                
                #line 109
                add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 112
                mov r2.xyz, v1.xyzx  // r2.x <- _psOut.Position.x; r2.y <- _psOut.Position.y; r2.z <- _psOut.Position.z
                mov r2.w, l(1.000000)  // r2.w <- _psOut.Position.w
                
                #line 113
                mov r3.xyz, v0.zzzz  // r3.x <- _psOut.Depth.x; r3.y <- _psOut.Depth.y; r3.z <- _psOut.Depth.z
                mov r3.w, l(1.000000)  // r3.w <- _psOut.Depth.w
                
                #line 114
                mov r1.xyzw, r1.xyzw  // r1.x <- _psOut.Albedo.x; r1.y <- _psOut.Albedo.y; r1.z <- _psOut.Albedo.z; r1.w <- _psOut.Albedo.w
                
                #line 115
                mov r0.xyz, r0.xyzx  // r0.x <- _psOut.Normal.x; r0.y <- _psOut.Normal.y; r0.z <- _psOut.Normal.z
                mov r0.w, l(1.000000)  // r0.w <- _psOut.Normal.w
                
                #line 116
                mov r4.xyzw, cb1[13].xyzw  // r4.x <- _psOut.Diffuse.x; r4.y <- _psOut.Diffuse.y; r4.z <- _psOut.Diffuse.z; r4.w <- _psOut.Diffuse.w
                
                #line 117
                mov r5.xyzw, cb1[14].xyzw  // r5.x <- _psOut.Specular.x; r5.y <- _psOut.Specular.y; r5.z <- _psOut.Specular.z; r5.w <- _psOut.Specular.w
                
                #line 118
                mov r6.xyzw, cb1[12].xyzw  // r6.x <- _psOut.Ambient.x; r6.y <- _psOut.Ambient.y; r6.z <- _psOut.Ambient.z; r6.w <- _psOut.Ambient.w
                
                #line 119
                mov o0.xyzw, r3.xyzw
                mov o1.xyzw, r0.xyzw
                mov o2.xyzw, r2.xyzw
                mov o3.xyzw, r1.xyzw
                mov o4.xyzw, r4.xyzw
                mov o5.xyzw, r5.xyzw
                mov o6.xyzw, r6.xyzw
                ret 
                // Approximately 36 instruction slots used
                            
            };
        }

        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float4x4 gLightWorldViewProj;      // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // $Globals                          cbuffer      NA          NA            cb0      1 
                // cbSkinned                         cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float       
                // WEIGHT                   0   xyz         4     NONE   float   xyz 
                // BONEINDEX                0   xyzw        5     NONE    uint   xyzw
                // TANGENT                  0   xyz         6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[4], immediateIndexed
                dcl_constantbuffer CB1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 9
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.Tex.x; v1.y <- vin.Tex.y; 
                //   v2.x <- vin.NormalL.x; v2.y <- vin.NormalL.y; v2.z <- vin.NormalL.z; 
                //   v3.x <- vin.Color.x; v3.y <- vin.Color.y; v3.z <- vin.Color.z; v3.w <- vin.Color.w; 
                //   v4.x <- vin.BoneWeight.x; v4.y <- vin.BoneWeight.y; v4.z <- vin.BoneWeight.z; 
                //   v5.x <- vin.BoneIndex.x; v5.y <- vin.BoneIndex.y; v5.z <- vin.BoneIndex.z; v5.w <- vin.BoneIndex.w; 
                //   v6.x <- vin.tangent.x; v6.y <- vin.tangent.y; v6.z <- vin.tangent.z; 
                //   o5.x <- <Shadow_VS return value>.tangent.x; o5.y <- <Shadow_VS return value>.tangent.y; o5.z <- <Shadow_VS return value>.tangent.z; 
                //   o4.x <- <Shadow_VS return value>.Tex.x; o4.y <- <Shadow_VS return value>.Tex.y; 
                //   o3.x <- <Shadow_VS return value>.Color.x; o3.y <- <Shadow_VS return value>.Color.y; o3.z <- <Shadow_VS return value>.Color.z; o3.w <- <Shadow_VS return value>.Color.w; 
                //   o2.x <- <Shadow_VS return value>.NormalW.x; o2.y <- <Shadow_VS return value>.NormalW.y; o2.z <- <Shadow_VS return value>.NormalW.z; 
                //   o1.x <- <Shadow_VS return value>.PosW.x; o1.y <- <Shadow_VS return value>.PosW.y; o1.z <- <Shadow_VS return value>.PosW.z; 
                //   o0.x <- <Shadow_VS return value>.PosH.x; o0.y <- <Shadow_VS return value>.PosH.y; o0.z <- <Shadow_VS return value>.PosH.z; o0.w <- <Shadow_VS return value>.PosH.w; 
                //   x0 <- weights
                //
                #line 50 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Shadow.fx"
                itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- _Out.Color.x; r0.y <- _Out.Color.y; r0.z <- _Out.Color.z; r0.w <- _Out.Color.w
                
                #line 51
                itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- _Out.NormalW.x; r1.y <- _Out.NormalW.y; r1.z <- _Out.NormalW.z
                
                #line 52
                itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- _Out.PosW.x; r2.y <- _Out.PosW.y; r2.z <- _Out.PosW.z
                
                #line 53
                itof r3.xyz, l(0, 0, 0, 0)  // r3.x <- _Out.tangent.x; r3.y <- _Out.tangent.y; r3.z <- _Out.tangent.z
                
                #line 54
                itof r4.xy, l(0, 0, 0, 0)  // r4.x <- _Out.Tex.x; r4.y <- _Out.Tex.y
                
                #line 58
                mov x0[0].x, v4.x
                
                #line 59
                mov x0[1].x, v4.y
                
                #line 60
                mov x0[2].x, v4.z
                
                #line 61
                mov r1.w, -v4.x
                add r1.w, r1.w, l(1.000000)
                mov r2.w, -v4.y
                add r1.w, r1.w, r2.w
                mov r2.w, -v4.z
                add r1.w, r1.w, r2.w
                mov x0[3].x, r1.w
                
                #line 63
                mov r5.xyz, l(0,0,0,0)  // r5.x <- posL.x; r5.y <- posL.y; r5.z <- posL.z
                
                #line 66
                mov r1.w, x0[0].x
                itof r2.w, l(0)
                lt r1.w, r2.w, r1.w
                if_nz r1.w
                
                #line 68
                  mov r1.w, l(0)  // r1.w <- i
                  mov r6.xyz, r5.xyzx  // r6.x <- posL.x; r6.y <- posL.y; r6.z <- posL.z
                  mov r2.w, r1.w  // r2.w <- i
                  loop 
                    ilt r3.w, r2.w, l(4)
                    breakc_z r3.w
                
                #line 70
                    mov r3.w, x0[r2.w + 0].x
                    ge r3.w, l(0.000100), r3.w
                    if_nz r3.w
                
                #line 71
                      break 
                    endif 
                
                #line 72
                    mov r3.w, x0[r2.w + 0].x
                    and r7.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                    or r4.zw, r7.yyyw, r7.xxxz
                    or r4.z, r4.w, r4.z
                    imul null, r4.z, r4.z, l(4)
                    mov r7.xyz, v0.xyzx
                    mov r7.w, l(1.000000)
                    dp4 r8.x, r7.xyzw, cb1[r4.z + 0].xyzw
                    dp4 r8.y, r7.xyzw, cb1[r4.z + 1].xyzw
                    dp4 r8.z, r7.xyzw, cb1[r4.z + 2].xyzw
                    mul r7.xyz, r3.wwww, r8.xyzx
                    add r6.xyz, r6.xyzx, r7.xyzx
                
                #line 68
                    iadd r2.w, r2.w, l(1)
                
                #line 74
                  endloop 
                
                #line 75
                else   // Prior locations: r5.x <- posL.x; r5.y <- posL.y; r5.z <- posL.z
                
                #line 78
                  mov r6.xyz, v0.xyzx  // r6.x <- posL.x; r6.y <- posL.y; r6.z <- posL.z
                
                #line 80
                endif 
                
                #line 82
                mov r6.w, l(1.000000)
                dp4 r5.x, r6.xyzw, cb0[0].xyzw  // r5.x <- _Out.PosH.x
                dp4 r5.y, r6.xyzw, cb0[1].xyzw  // r5.y <- _Out.PosH.y
                dp4 r5.z, r6.xyzw, cb0[2].xyzw  // r5.z <- _Out.PosH.z
                dp4 r5.w, r6.xyzw, cb0[3].xyzw  // r5.w <- _Out.PosH.w
                
                #line 84
                mov o0.xyzw, r5.xyzw
                mov o3.xyzw, r0.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r1.xyzx
                mov o5.xyz, r3.xyzx
                mov o4.xy, r4.xyxx
                ret 
                // Approximately 60 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     z 
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                7   xyzw        7   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps_siv linear noperspective v0.z, position
                dcl_output o7.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Color.x; v3.y <- pin.Color.y; v3.z <- pin.Color.z; v3.w <- pin.Color.w; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.tangent.x; v5.y <- pin.tangent.y; v5.z <- pin.tangent.z; 
                //   o7.x <- <Shadow_PS return value>.x; o7.y <- <Shadow_PS return value>.y; o7.z <- <Shadow_PS return value>.z; o7.w <- <Shadow_PS return value>.w
                //
                #line 91 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Shadow.fx"
                mov o7.xyz, v0.zzzz
                mov o7.w, l(1.000000)
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

    technique11 LightTech
    {
        pass P1
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbSkinned                         cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // WEIGHT                   0   xyz         4     NONE   float   xyz 
                // BONEINDEX                0   xyzw        5     NONE    uint   xyzw
                // TANGENT                  0   xyz         6     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_input v6.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_output o3.xy
                dcl_output o4.xyz
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.Tex.x; v1.y <- vin.Tex.y; 
                //   v2.x <- vin.NormalL.x; v2.y <- vin.NormalL.y; v2.z <- vin.NormalL.z; 
                //   v3.x <- vin.Color.x; v3.y <- vin.Color.y; v3.z <- vin.Color.z; v3.w <- vin.Color.w; 
                //   v4.x <- vin.BoneWeight.x; v4.y <- vin.BoneWeight.y; v4.z <- vin.BoneWeight.z; 
                //   v5.x <- vin.BoneIndex.x; v5.y <- vin.BoneIndex.y; v5.z <- vin.BoneIndex.z; v5.w <- vin.BoneIndex.w; 
                //   v6.x <- vin.tangent.x; v6.y <- vin.tangent.y; v6.z <- vin.tangent.z; 
                //   o4.x <- <VS return value>.tangent.x; o4.y <- <VS return value>.tangent.y; o4.z <- <VS return value>.tangent.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.Color.x; o2.y <- <VS return value>.Color.y; o2.z <- <VS return value>.Color.z; o2.w <- <VS return value>.Color.w; 
                //   o1.x <- <VS return value>.NormalL.x; o1.y <- <VS return value>.NormalL.y; o1.z <- <VS return value>.NormalL.z; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z; 
                //   x0 <- weights
                //
                #line 39 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                mov r0.xyz, l(0,0,0,0)  // r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z
                
                #line 40
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalL.x; r1.y <- normalL.y; r1.z <- normalL.z
                
                #line 43
                mov x0[0].x, v4.x
                
                #line 44
                mov x0[1].x, v4.y
                
                #line 45
                mov x0[2].x, v4.z
                
                #line 46
                mov r0.w, -v4.x
                add r0.w, r0.w, l(1.000000)
                mov r1.w, -v4.y
                add r0.w, r0.w, r1.w
                mov r1.w, -v4.z
                add r0.w, r0.w, r1.w
                mov x0[3].x, r0.w
                
                #line 48
                mov r0.w, x0[0].x
                itof r1.w, l(0)
                lt r0.w, r1.w, r0.w
                if_nz r0.w
                
                #line 50
                  mov r0.w, l(0)  // r0.w <- i
                  mov r2.xyz, r0.xyzx  // r2.x <- posL.x; r2.y <- posL.y; r2.z <- posL.z
                  mov r3.xyz, r1.xyzx  // r3.x <- normalL.x; r3.y <- normalL.y; r3.z <- normalL.z
                  mov r1.w, r0.w  // r1.w <- i
                  loop 
                    ilt r2.w, r1.w, l(4)
                    breakc_z r2.w
                
                #line 52
                    mov r2.w, x0[r1.w + 0].x
                    ge r2.w, l(0.000100), r2.w
                    if_nz r2.w
                
                #line 53
                      break 
                    endif 
                
                #line 54
                    mov r2.w, x0[r1.w + 0].x
                    and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                    or r4.xy, r4.ywyy, r4.xzxx
                    or r3.w, r4.y, r4.x
                    imul null, r3.w, r3.w, l(4)
                    mov r4.xyz, v0.xyzx
                    mov r4.w, l(1.000000)
                    dp4 r5.x, r4.xyzw, cb0[r3.w + 0].xyzw
                    dp4 r5.y, r4.xyzw, cb0[r3.w + 1].xyzw
                    dp4 r5.z, r4.xyzw, cb0[r3.w + 2].xyzw
                    mul r4.xyz, r2.wwww, r5.xyzx
                    add r2.xyz, r2.xyzx, r4.xyzx
                
                #line 55
                    mov r2.w, x0[r1.w + 0].x
                    and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                    or r4.xy, r4.ywyy, r4.xzxx
                    or r3.w, r4.y, r4.x
                    imul null, r3.w, r3.w, l(4)
                    dp3 r4.x, v2.xyzx, cb0[r3.w + 0].xyzx
                    dp3 r4.y, v2.xyzx, cb0[r3.w + 1].xyzx
                    dp3 r4.z, v2.xyzx, cb0[r3.w + 2].xyzx
                    mul r4.xyz, r2.wwww, r4.xyzx
                    add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 50
                    iadd r1.w, r1.w, l(1)
                
                #line 56
                  endloop 
                
                #line 57
                else   // Prior locations: r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z; r1.x <- normalL.x; r1.y <- normalL.y; r1.z <- normalL.z
                
                #line 60
                  mov r2.xyz, v0.xyzx  // r2.x <- posL.x; r2.y <- posL.y; r2.z <- posL.z
                
                #line 61
                  mov r3.xyz, v2.xyzx  // r3.x <- normalL.x; r3.y <- normalL.y; r3.z <- normalL.z
                
                #line 62
                endif 
                
                #line 74
                mov r2.xyz, r2.xyzx  // r2.x <- vout.PosL.x; r2.y <- vout.PosL.y; r2.z <- vout.PosL.z
                
                #line 75
                mov r3.xyz, r3.xyzx  // r3.x <- vout.NormalL.x; r3.y <- vout.NormalL.y; r3.z <- vout.NormalL.z
                
                #line 76
                mov r0.xyzw, v3.xyzw  // r0.x <- vout.Color.x; r0.y <- vout.Color.y; r0.z <- vout.Color.z; r0.w <- vout.Color.w
                
                #line 77
                mov r1.xy, v1.xyxx  // r1.x <- vout.Tex.x; r1.y <- vout.Tex.y
                
                #line 78
                mov r4.xyz, v6.xyzx  // r4.x <- vout.tangent.x; r4.y <- vout.tangent.y; r4.z <- vout.tangent.z
                
                #line 80
                mov o2.xyzw, r0.xyzw
                mov o0.xyz, r2.xyzx
                mov o1.xyz, r3.xyzx
                mov o4.xyz, r4.xyzx
                mov o3.xy, r1.xyxx
                ret 
                // Approximately 67 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldlnvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyzw
                dcl_input v[3][3].xy
                dcl_input v[3][4].xyz
                dcl_temps 6
                dcl_indexableTemp x0[36], 4
                dcl_inputprimitive triangle 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_maxout 6
                //
                // Initial variable locations:
                //   m0 <- triStream; 
                //   v[0][0].x <- gin[0].PosL.x; v[0][0].y <- gin[0].PosL.y; v[0][0].z <- gin[0].PosL.z; 
                //   v[0][1].x <- gin[0].NormalL.x; v[0][1].y <- gin[0].NormalL.y; v[0][1].z <- gin[0].NormalL.z; 
                //   v[0][2].x <- gin[0].Color.x; v[0][2].y <- gin[0].Color.y; v[0][2].z <- gin[0].Color.z; v[0][2].w <- gin[0].Color.w; 
                //   v[0][3].x <- gin[0].Tex.x; v[0][3].y <- gin[0].Tex.y; 
                //   v[0][4].x <- gin[0].tangent.x; v[0][4].y <- gin[0].tangent.y; v[0][4].z <- gin[0].tangent.z; 
                //   v[1][0].x <- gin[1].PosL.x; v[1][0].y <- gin[1].PosL.y; v[1][0].z <- gin[1].PosL.z; 
                //   v[1][1].x <- gin[1].NormalL.x; v[1][1].y <- gin[1].NormalL.y; v[1][1].z <- gin[1].NormalL.z; 
                //   v[1][2].x <- gin[1].Color.x; v[1][2].y <- gin[1].Color.y; v[1][2].z <- gin[1].Color.z; v[1][2].w <- gin[1].Color.w; 
                //   v[1][3].x <- gin[1].Tex.x; v[1][3].y <- gin[1].Tex.y; 
                //   v[1][4].x <- gin[1].tangent.x; v[1][4].y <- gin[1].tangent.y; v[1][4].z <- gin[1].tangent.z; 
                //   v[2][0].x <- gin[2].PosL.x; v[2][0].y <- gin[2].PosL.y; v[2][0].z <- gin[2].PosL.z; 
                //   v[2][1].x <- gin[2].NormalL.x; v[2][1].y <- gin[2].NormalL.y; v[2][1].z <- gin[2].NormalL.z; 
                //   v[2][2].x <- gin[2].Color.x; v[2][2].y <- gin[2].Color.y; v[2][2].z <- gin[2].Color.z; v[2][2].w <- gin[2].Color.w; 
                //   v[2][3].x <- gin[2].Tex.x; v[2][3].y <- gin[2].Tex.y; 
                //   v[2][4].x <- gin[2].tangent.x; v[2][4].y <- gin[2].tangent.y; v[2][4].z <- gin[2].tangent.z; 
                //   x0 <- gout
                //
                #line 130 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[0][1].xyzx
                add r0.xyz, r0.xyzx, v[0][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw
                dp4 r1.y, r0.xyzw, cb0[9].xyzw
                dp4 r1.z, r0.xyzw, cb0[10].xyzw
                dp4 r1.w, r0.xyzw, cb0[11].xyzw
                mov x0[0].xyzw, r1.xyzw
                
                #line 131
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[0][1].xyzx
                add r0.xyz, r0.xyzx, v[0][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                mov x0[1].xyz, r1.xyzx
                
                #line 132
                dp3 r0.x, v[0][1].xyzx, cb0[4].xyzx
                dp3 r0.y, v[0][1].xyzx, cb0[5].xyzx
                dp3 r0.z, v[0][1].xyzx, cb0[6].xyzx
                mov x0[2].xyz, r0.xyzx
                
                #line 133
                mov x0[3].xyzw, v[0][2].xyzw
                
                #line 134
                mov x0[4].xy, v[0][3].xyxx
                
                #line 135
                mov x0[5].xyz, v[0][4].xyzx
                
                #line 130
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[1][1].xyzx
                add r0.xyz, r0.xyzx, v[1][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw
                dp4 r1.y, r0.xyzw, cb0[9].xyzw
                dp4 r1.z, r0.xyzw, cb0[10].xyzw
                dp4 r1.w, r0.xyzw, cb0[11].xyzw
                mov x0[6].xyzw, r1.xyzw
                
                #line 131
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[1][1].xyzx
                add r0.xyz, r0.xyzx, v[1][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                mov x0[7].xyz, r1.xyzx
                
                #line 132
                dp3 r0.x, v[1][1].xyzx, cb0[4].xyzx
                dp3 r0.y, v[1][1].xyzx, cb0[5].xyzx
                dp3 r0.z, v[1][1].xyzx, cb0[6].xyzx
                mov x0[8].xyz, r0.xyzx
                
                #line 133
                mov x0[9].xyzw, v[1][2].xyzw
                
                #line 134
                mov x0[10].xy, v[1][3].xyxx
                
                #line 135
                mov x0[11].xyz, v[1][4].xyzx
                
                #line 130
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[2][1].xyzx
                add r0.xyz, r0.xyzx, v[2][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw
                dp4 r1.y, r0.xyzw, cb0[9].xyzw
                dp4 r1.z, r0.xyzw, cb0[10].xyzw
                dp4 r1.w, r0.xyzw, cb0[11].xyzw
                mov x0[12].xyzw, r1.xyzw
                
                #line 131
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[2][1].xyzx
                add r0.xyz, r0.xyzx, v[2][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                mov x0[13].xyz, r1.xyzx
                
                #line 132
                dp3 r0.x, v[2][1].xyzx, cb0[4].xyzx
                dp3 r0.y, v[2][1].xyzx, cb0[5].xyzx
                dp3 r0.z, v[2][1].xyzx, cb0[6].xyzx
                mov x0[14].xyz, r0.xyzx
                
                #line 133
                mov x0[15].xyzw, v[2][2].xyzw
                
                #line 134
                mov x0[16].xy, v[2][3].xyxx
                
                #line 135
                mov x0[17].xyz, v[2][4].xyzx
                
                #line 138
                mov r0.x, l(0)  // r0.x <- j
                mov r0.y, r0.x  // r0.y <- j
                loop 
                  ilt r0.z, r0.y, l(3)
                  breakc_z r0.z
                
                #line 140
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  add r1.xyz, l(100.000000, 0.000000, 0.000000, 0.000000), v[r0.y + 0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[8].xyzw
                  dp4 r2.y, r1.xyzw, cb0[9].xyzw
                  dp4 r2.z, r1.xyzw, cb0[10].xyzw
                  dp4 r2.w, r1.xyzw, cb0[11].xyzw
                  mov x0[r0.z + 0].xyzw, r2.xyzw
                
                #line 141
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  add r1.xyz, l(100.000000, 0.000000, 0.000000, 0.000000), v[r0.y + 0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[0].xyzw
                  dp4 r2.y, r1.xyzw, cb0[1].xyzw
                  dp4 r2.z, r1.xyzw, cb0[2].xyzw
                  mov x0[r0.z + 1].xyz, r2.xyzx
                
                #line 142
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  dp3 r1.x, v[r0.y + 0][1].xyzx, cb0[4].xyzx
                  dp3 r1.y, v[r0.y + 0][1].xyzx, cb0[5].xyzx
                  dp3 r1.z, v[r0.y + 0][1].xyzx, cb0[6].xyzx
                  mov x0[r0.z + 2].xyz, r1.xyzx
                
                #line 143
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  mov x0[r0.z + 3].xyzw, v[r0.y + 0][2].xyzw
                
                #line 144
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  mov x0[r0.z + 4].xy, v[r0.y + 0][3].xyxx
                
                #line 145
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  mov x0[r0.z + 5].xyz, v[r0.y + 0][4].xyzx
                
                #line 147
                  iadd r0.y, r0.y, l(1)
                endloop 
                
                #line 149
                mov r0.xyzw, x0[0].xyzw
                mov r1.xyz, x0[1].xyzx
                mov r2.xyz, x0[2].xyzx
                mov r3.xyzw, x0[3].xyzw
                mov r4.xy, x0[4].xyxx
                mov r5.xyz, x0[5].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 150
                mov r0.xyzw, x0[6].xyzw
                mov r1.xyz, x0[7].xyzx
                mov r2.xyz, x0[8].xyzx
                mov r3.xyzw, x0[9].xyzw
                mov r4.xy, x0[10].xyxx
                mov r5.xyz, x0[11].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 151
                mov r0.xyzw, x0[12].xyzw
                mov r1.xyz, x0[13].xyzx
                mov r2.xyz, x0[14].xyzx
                mov r3.xyzw, x0[15].xyzw
                mov r4.xy, x0[16].xyxx
                mov r5.xyz, x0[17].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 153
                cut_stream m0
                
                #line 155
                mov r0.xyzw, x0[18].xyzw
                mov r1.xyz, x0[19].xyzx
                mov r2.xyz, x0[20].xyzx
                mov r3.xyzw, x0[21].xyzw
                mov r4.xy, x0[22].xyxx
                mov r5.xyz, x0[23].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 156
                mov r0.xyzw, x0[24].xyzw
                mov r1.xyz, x0[25].xyzx
                mov r2.xyz, x0[26].xyzx
                mov r3.xyzw, x0[27].xyzw
                mov r4.xy, x0[28].xyxx
                mov r5.xyz, x0[29].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 157
                mov r0.xyzw, x0[30].xyzw
                mov r1.xyz, x0[31].xyzx
                mov r2.xyz, x0[32].xyzx
                mov r3.xyzw, x0[33].xyzw
                mov r4.xy, x0[34].xyxx
                mov r5.xyz, x0[35].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 159
                cut_stream m0
                
                #line 161
                ret 
                // Approximately 192 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldlnvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gCubeMap                          texture  float4        cube             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     z 
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                // SV_Target                1   xyzw        1   TARGET   float   xyzw
                // SV_Target                2   xyzw        2   TARGET   float   xyzw
                // SV_Target                3   xyzw        3   TARGET   float   xyzw
                // SV_Target                4   xyzw        4   TARGET   float   xyzw
                // SV_Target                5   xyzw        5   TARGET   float   xyzw
                // SV_Target                6   xyzw        6   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.z, position
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Color.x; v3.y <- pin.Color.y; v3.z <- pin.Color.z; v3.w <- pin.Color.w; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.tangent.x; v5.y <- pin.tangent.y; v5.z <- pin.tangent.z; 
                //   o6.x <- <PS return value>.Ambient.x; o6.y <- <PS return value>.Ambient.y; o6.z <- <PS return value>.Ambient.z; o6.w <- <PS return value>.Ambient.w; 
                //   o5.x <- <PS return value>.Specular.x; o5.y <- <PS return value>.Specular.y; o5.z <- <PS return value>.Specular.z; o5.w <- <PS return value>.Specular.w; 
                //   o4.x <- <PS return value>.Diffuse.x; o4.y <- <PS return value>.Diffuse.y; o4.z <- <PS return value>.Diffuse.z; o4.w <- <PS return value>.Diffuse.w; 
                //   o3.x <- <PS return value>.Albedo.x; o3.y <- <PS return value>.Albedo.y; o3.z <- <PS return value>.Albedo.z; o3.w <- <PS return value>.Albedo.w; 
                //   o2.x <- <PS return value>.Position.x; o2.y <- <PS return value>.Position.y; o2.z <- <PS return value>.Position.z; o2.w <- <PS return value>.Position.w; 
                //   o1.x <- <PS return value>.Normal.x; o1.y <- <PS return value>.Normal.y; o1.z <- <PS return value>.Normal.z; o1.w <- <PS return value>.Normal.w; 
                //   o0.x <- <PS return value>.Depth.x; o0.y <- <PS return value>.Depth.y; o0.z <- <PS return value>.Depth.z; o0.w <- <PS return value>.Depth.w
                //
                #line 86 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 87
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[0].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- toEyeW.x; r1.y <- toEyeW.y; r1.z <- toEyeW.z
                
                #line 88
                mov r2.xyzw, v3.xyzw  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 102
                mov r0.xyz, r0.xyzx  // r0.x <- NormalW.x; r0.y <- NormalW.y; r0.z <- NormalW.z
                
                #line 106
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 107
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r0.xyzx, r1.wwww
                add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- reflectionVector.x; r1.y <- reflectionVector.y; r1.z <- reflectionVector.z
                
                #line 108
                sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0  // r1.x <- reflectionColor.x; r1.y <- reflectionColor.y; r1.z <- reflectionColor.z; r1.w <- reflectionColor.w
                
                #line 109
                add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z; r1.w <- litColor.w
                
                #line 112
                mov r2.xyz, v1.xyzx  // r2.x <- _psOut.Position.x; r2.y <- _psOut.Position.y; r2.z <- _psOut.Position.z
                mov r2.w, l(1.000000)  // r2.w <- _psOut.Position.w
                
                #line 113
                mov r3.xyz, v0.zzzz  // r3.x <- _psOut.Depth.x; r3.y <- _psOut.Depth.y; r3.z <- _psOut.Depth.z
                mov r3.w, l(1.000000)  // r3.w <- _psOut.Depth.w
                
                #line 114
                mov r1.xyzw, r1.xyzw  // r1.x <- _psOut.Albedo.x; r1.y <- _psOut.Albedo.y; r1.z <- _psOut.Albedo.z; r1.w <- _psOut.Albedo.w
                
                #line 115
                mov r0.xyz, r0.xyzx  // r0.x <- _psOut.Normal.x; r0.y <- _psOut.Normal.y; r0.z <- _psOut.Normal.z
                mov r0.w, l(1.000000)  // r0.w <- _psOut.Normal.w
                
                #line 116
                mov r4.xyzw, cb1[13].xyzw  // r4.x <- _psOut.Diffuse.x; r4.y <- _psOut.Diffuse.y; r4.z <- _psOut.Diffuse.z; r4.w <- _psOut.Diffuse.w
                
                #line 117
                mov r5.xyzw, cb1[14].xyzw  // r5.x <- _psOut.Specular.x; r5.y <- _psOut.Specular.y; r5.z <- _psOut.Specular.z; r5.w <- _psOut.Specular.w
                
                #line 118
                mov r6.xyzw, cb1[12].xyzw  // r6.x <- _psOut.Ambient.x; r6.y <- _psOut.Ambient.y; r6.z <- _psOut.Ambient.z; r6.w <- _psOut.Ambient.w
                
                #line 119
                mov o0.xyzw, r3.xyzw
                mov o1.xyzw, r0.xyzw
                mov o2.xyzw, r2.xyzw
                mov o3.xyzw, r1.xyzw
                mov o4.xyzw, r4.xyzw
                mov o5.xyzw, r5.xyzw
                mov o6.xyzw, r6.xyzw
                ret 
                // Approximately 36 instruction slots used
                            
            };
        }

        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float4x4 gLightWorldViewProj;      // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // $Globals                          cbuffer      NA          NA            cb0      1 
                // cbSkinned                         cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float       
                // WEIGHT                   0   xyz         4     NONE   float   xyz 
                // BONEINDEX                0   xyzw        5     NONE    uint   xyzw
                // TANGENT                  0   xyz         6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[4], immediateIndexed
                dcl_constantbuffer CB1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 9
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.Tex.x; v1.y <- vin.Tex.y; 
                //   v2.x <- vin.NormalL.x; v2.y <- vin.NormalL.y; v2.z <- vin.NormalL.z; 
                //   v3.x <- vin.Color.x; v3.y <- vin.Color.y; v3.z <- vin.Color.z; v3.w <- vin.Color.w; 
                //   v4.x <- vin.BoneWeight.x; v4.y <- vin.BoneWeight.y; v4.z <- vin.BoneWeight.z; 
                //   v5.x <- vin.BoneIndex.x; v5.y <- vin.BoneIndex.y; v5.z <- vin.BoneIndex.z; v5.w <- vin.BoneIndex.w; 
                //   v6.x <- vin.tangent.x; v6.y <- vin.tangent.y; v6.z <- vin.tangent.z; 
                //   o5.x <- <Shadow_VS return value>.tangent.x; o5.y <- <Shadow_VS return value>.tangent.y; o5.z <- <Shadow_VS return value>.tangent.z; 
                //   o4.x <- <Shadow_VS return value>.Tex.x; o4.y <- <Shadow_VS return value>.Tex.y; 
                //   o3.x <- <Shadow_VS return value>.Color.x; o3.y <- <Shadow_VS return value>.Color.y; o3.z <- <Shadow_VS return value>.Color.z; o3.w <- <Shadow_VS return value>.Color.w; 
                //   o2.x <- <Shadow_VS return value>.NormalW.x; o2.y <- <Shadow_VS return value>.NormalW.y; o2.z <- <Shadow_VS return value>.NormalW.z; 
                //   o1.x <- <Shadow_VS return value>.PosW.x; o1.y <- <Shadow_VS return value>.PosW.y; o1.z <- <Shadow_VS return value>.PosW.z; 
                //   o0.x <- <Shadow_VS return value>.PosH.x; o0.y <- <Shadow_VS return value>.PosH.y; o0.z <- <Shadow_VS return value>.PosH.z; o0.w <- <Shadow_VS return value>.PosH.w; 
                //   x0 <- weights
                //
                #line 50 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Shadow.fx"
                itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- _Out.Color.x; r0.y <- _Out.Color.y; r0.z <- _Out.Color.z; r0.w <- _Out.Color.w
                
                #line 51
                itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- _Out.NormalW.x; r1.y <- _Out.NormalW.y; r1.z <- _Out.NormalW.z
                
                #line 52
                itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- _Out.PosW.x; r2.y <- _Out.PosW.y; r2.z <- _Out.PosW.z
                
                #line 53
                itof r3.xyz, l(0, 0, 0, 0)  // r3.x <- _Out.tangent.x; r3.y <- _Out.tangent.y; r3.z <- _Out.tangent.z
                
                #line 54
                itof r4.xy, l(0, 0, 0, 0)  // r4.x <- _Out.Tex.x; r4.y <- _Out.Tex.y
                
                #line 58
                mov x0[0].x, v4.x
                
                #line 59
                mov x0[1].x, v4.y
                
                #line 60
                mov x0[2].x, v4.z
                
                #line 61
                mov r1.w, -v4.x
                add r1.w, r1.w, l(1.000000)
                mov r2.w, -v4.y
                add r1.w, r1.w, r2.w
                mov r2.w, -v4.z
                add r1.w, r1.w, r2.w
                mov x0[3].x, r1.w
                
                #line 63
                mov r5.xyz, l(0,0,0,0)  // r5.x <- posL.x; r5.y <- posL.y; r5.z <- posL.z
                
                #line 66
                mov r1.w, x0[0].x
                itof r2.w, l(0)
                lt r1.w, r2.w, r1.w
                if_nz r1.w
                
                #line 68
                  mov r1.w, l(0)  // r1.w <- i
                  mov r6.xyz, r5.xyzx  // r6.x <- posL.x; r6.y <- posL.y; r6.z <- posL.z
                  mov r2.w, r1.w  // r2.w <- i
                  loop 
                    ilt r3.w, r2.w, l(4)
                    breakc_z r3.w
                
                #line 70
                    mov r3.w, x0[r2.w + 0].x
                    ge r3.w, l(0.000100), r3.w
                    if_nz r3.w
                
                #line 71
                      break 
                    endif 
                
                #line 72
                    mov r3.w, x0[r2.w + 0].x
                    and r7.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                    or r4.zw, r7.yyyw, r7.xxxz
                    or r4.z, r4.w, r4.z
                    imul null, r4.z, r4.z, l(4)
                    mov r7.xyz, v0.xyzx
                    mov r7.w, l(1.000000)
                    dp4 r8.x, r7.xyzw, cb1[r4.z + 0].xyzw
                    dp4 r8.y, r7.xyzw, cb1[r4.z + 1].xyzw
                    dp4 r8.z, r7.xyzw, cb1[r4.z + 2].xyzw
                    mul r7.xyz, r3.wwww, r8.xyzx
                    add r6.xyz, r6.xyzx, r7.xyzx
                
                #line 68
                    iadd r2.w, r2.w, l(1)
                
                #line 74
                  endloop 
                
                #line 75
                else   // Prior locations: r5.x <- posL.x; r5.y <- posL.y; r5.z <- posL.z
                
                #line 78
                  mov r6.xyz, v0.xyzx  // r6.x <- posL.x; r6.y <- posL.y; r6.z <- posL.z
                
                #line 80
                endif 
                
                #line 82
                mov r6.w, l(1.000000)
                dp4 r5.x, r6.xyzw, cb0[0].xyzw  // r5.x <- _Out.PosH.x
                dp4 r5.y, r6.xyzw, cb0[1].xyzw  // r5.y <- _Out.PosH.y
                dp4 r5.z, r6.xyzw, cb0[2].xyzw  // r5.z <- _Out.PosH.z
                dp4 r5.w, r6.xyzw, cb0[3].xyzw  // r5.w <- _Out.PosH.w
                
                #line 84
                mov o0.xyzw, r5.xyzw
                mov o3.xyzw, r0.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r1.xyzx
                mov o5.xyz, r3.xyzx
                mov o4.xy, r4.xyxx
                ret 
                // Approximately 60 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     z 
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                7   xyzw        7   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps_siv linear noperspective v0.z, position
                dcl_output o7.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Color.x; v3.y <- pin.Color.y; v3.z <- pin.Color.z; v3.w <- pin.Color.w; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.tangent.x; v5.y <- pin.tangent.y; v5.z <- pin.tangent.z; 
                //   o7.x <- <Shadow_PS return value>.x; o7.y <- <Shadow_PS return value>.y; o7.z <- <Shadow_PS return value>.z; o7.w <- <Shadow_PS return value>.w
                //
                #line 91 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Shadow.fx"
                mov o7.xyz, v0.zzzz
                mov o7.w, l(1.000000)
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

    technique11 NormalTech
    {
        pass P1
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbSkinned                         cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // WEIGHT                   0   xyz         4     NONE   float   xyz 
                // BONEINDEX                0   xyzw        5     NONE    uint   xyzw
                // TANGENT                  0   xyz         6     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xyz
                dcl_input v3.xyzw
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_input v6.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_output o3.xy
                dcl_output o4.xyz
                dcl_temps 6
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.Tex.x; v1.y <- vin.Tex.y; 
                //   v2.x <- vin.NormalL.x; v2.y <- vin.NormalL.y; v2.z <- vin.NormalL.z; 
                //   v3.x <- vin.Color.x; v3.y <- vin.Color.y; v3.z <- vin.Color.z; v3.w <- vin.Color.w; 
                //   v4.x <- vin.BoneWeight.x; v4.y <- vin.BoneWeight.y; v4.z <- vin.BoneWeight.z; 
                //   v5.x <- vin.BoneIndex.x; v5.y <- vin.BoneIndex.y; v5.z <- vin.BoneIndex.z; v5.w <- vin.BoneIndex.w; 
                //   v6.x <- vin.tangent.x; v6.y <- vin.tangent.y; v6.z <- vin.tangent.z; 
                //   o4.x <- <VS return value>.tangent.x; o4.y <- <VS return value>.tangent.y; o4.z <- <VS return value>.tangent.z; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.Color.x; o2.y <- <VS return value>.Color.y; o2.z <- <VS return value>.Color.z; o2.w <- <VS return value>.Color.w; 
                //   o1.x <- <VS return value>.NormalL.x; o1.y <- <VS return value>.NormalL.y; o1.z <- <VS return value>.NormalL.z; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z; 
                //   x0 <- weights
                //
                #line 39 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                mov r0.xyz, l(0,0,0,0)  // r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z
                
                #line 40
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalL.x; r1.y <- normalL.y; r1.z <- normalL.z
                
                #line 43
                mov x0[0].x, v4.x
                
                #line 44
                mov x0[1].x, v4.y
                
                #line 45
                mov x0[2].x, v4.z
                
                #line 46
                mov r0.w, -v4.x
                add r0.w, r0.w, l(1.000000)
                mov r1.w, -v4.y
                add r0.w, r0.w, r1.w
                mov r1.w, -v4.z
                add r0.w, r0.w, r1.w
                mov x0[3].x, r0.w
                
                #line 48
                mov r0.w, x0[0].x
                itof r1.w, l(0)
                lt r0.w, r1.w, r0.w
                if_nz r0.w
                
                #line 50
                  mov r0.w, l(0)  // r0.w <- i
                  mov r2.xyz, r0.xyzx  // r2.x <- posL.x; r2.y <- posL.y; r2.z <- posL.z
                  mov r3.xyz, r1.xyzx  // r3.x <- normalL.x; r3.y <- normalL.y; r3.z <- normalL.z
                  mov r1.w, r0.w  // r1.w <- i
                  loop 
                    ilt r2.w, r1.w, l(4)
                    breakc_z r2.w
                
                #line 52
                    mov r2.w, x0[r1.w + 0].x
                    ge r2.w, l(0.000100), r2.w
                    if_nz r2.w
                
                #line 53
                      break 
                    endif 
                
                #line 54
                    mov r2.w, x0[r1.w + 0].x
                    and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                    or r4.xy, r4.ywyy, r4.xzxx
                    or r3.w, r4.y, r4.x
                    imul null, r3.w, r3.w, l(4)
                    mov r4.xyz, v0.xyzx
                    mov r4.w, l(1.000000)
                    dp4 r5.x, r4.xyzw, cb0[r3.w + 0].xyzw
                    dp4 r5.y, r4.xyzw, cb0[r3.w + 1].xyzw
                    dp4 r5.z, r4.xyzw, cb0[r3.w + 2].xyzw
                    mul r4.xyz, r2.wwww, r5.xyzx
                    add r2.xyz, r2.xyzx, r4.xyzx
                
                #line 55
                    mov r2.w, x0[r1.w + 0].x
                    and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                    or r4.xy, r4.ywyy, r4.xzxx
                    or r3.w, r4.y, r4.x
                    imul null, r3.w, r3.w, l(4)
                    dp3 r4.x, v2.xyzx, cb0[r3.w + 0].xyzx
                    dp3 r4.y, v2.xyzx, cb0[r3.w + 1].xyzx
                    dp3 r4.z, v2.xyzx, cb0[r3.w + 2].xyzx
                    mul r4.xyz, r2.wwww, r4.xyzx
                    add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 50
                    iadd r1.w, r1.w, l(1)
                
                #line 56
                  endloop 
                
                #line 57
                else   // Prior locations: r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z; r1.x <- normalL.x; r1.y <- normalL.y; r1.z <- normalL.z
                
                #line 60
                  mov r2.xyz, v0.xyzx  // r2.x <- posL.x; r2.y <- posL.y; r2.z <- posL.z
                
                #line 61
                  mov r3.xyz, v2.xyzx  // r3.x <- normalL.x; r3.y <- normalL.y; r3.z <- normalL.z
                
                #line 62
                endif 
                
                #line 74
                mov r2.xyz, r2.xyzx  // r2.x <- vout.PosL.x; r2.y <- vout.PosL.y; r2.z <- vout.PosL.z
                
                #line 75
                mov r3.xyz, r3.xyzx  // r3.x <- vout.NormalL.x; r3.y <- vout.NormalL.y; r3.z <- vout.NormalL.z
                
                #line 76
                mov r0.xyzw, v3.xyzw  // r0.x <- vout.Color.x; r0.y <- vout.Color.y; r0.z <- vout.Color.z; r0.w <- vout.Color.w
                
                #line 77
                mov r1.xy, v1.xyxx  // r1.x <- vout.Tex.x; r1.y <- vout.Tex.y
                
                #line 78
                mov r4.xyz, v6.xyzx  // r4.x <- vout.tangent.x; r4.y <- vout.tangent.y; r4.z <- vout.tangent.z
                
                #line 80
                mov o2.xyzw, r0.xyzw
                mov o0.xyz, r2.xyzx
                mov o1.xyz, r3.xyzx
                mov o4.xyz, r4.xyzx
                mov o3.xy, r1.xyxx
                ret 
                // Approximately 67 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldlnvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyzw
                dcl_input v[3][3].xy
                dcl_input v[3][4].xyz
                dcl_temps 6
                dcl_indexableTemp x0[36], 4
                dcl_inputprimitive triangle 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_maxout 6
                //
                // Initial variable locations:
                //   m0 <- triStream; 
                //   v[0][0].x <- gin[0].PosL.x; v[0][0].y <- gin[0].PosL.y; v[0][0].z <- gin[0].PosL.z; 
                //   v[0][1].x <- gin[0].NormalL.x; v[0][1].y <- gin[0].NormalL.y; v[0][1].z <- gin[0].NormalL.z; 
                //   v[0][2].x <- gin[0].Color.x; v[0][2].y <- gin[0].Color.y; v[0][2].z <- gin[0].Color.z; v[0][2].w <- gin[0].Color.w; 
                //   v[0][3].x <- gin[0].Tex.x; v[0][3].y <- gin[0].Tex.y; 
                //   v[0][4].x <- gin[0].tangent.x; v[0][4].y <- gin[0].tangent.y; v[0][4].z <- gin[0].tangent.z; 
                //   v[1][0].x <- gin[1].PosL.x; v[1][0].y <- gin[1].PosL.y; v[1][0].z <- gin[1].PosL.z; 
                //   v[1][1].x <- gin[1].NormalL.x; v[1][1].y <- gin[1].NormalL.y; v[1][1].z <- gin[1].NormalL.z; 
                //   v[1][2].x <- gin[1].Color.x; v[1][2].y <- gin[1].Color.y; v[1][2].z <- gin[1].Color.z; v[1][2].w <- gin[1].Color.w; 
                //   v[1][3].x <- gin[1].Tex.x; v[1][3].y <- gin[1].Tex.y; 
                //   v[1][4].x <- gin[1].tangent.x; v[1][4].y <- gin[1].tangent.y; v[1][4].z <- gin[1].tangent.z; 
                //   v[2][0].x <- gin[2].PosL.x; v[2][0].y <- gin[2].PosL.y; v[2][0].z <- gin[2].PosL.z; 
                //   v[2][1].x <- gin[2].NormalL.x; v[2][1].y <- gin[2].NormalL.y; v[2][1].z <- gin[2].NormalL.z; 
                //   v[2][2].x <- gin[2].Color.x; v[2][2].y <- gin[2].Color.y; v[2][2].z <- gin[2].Color.z; v[2][2].w <- gin[2].Color.w; 
                //   v[2][3].x <- gin[2].Tex.x; v[2][3].y <- gin[2].Tex.y; 
                //   v[2][4].x <- gin[2].tangent.x; v[2][4].y <- gin[2].tangent.y; v[2][4].z <- gin[2].tangent.z; 
                //   x0 <- gout
                //
                #line 130 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[0][1].xyzx
                add r0.xyz, r0.xyzx, v[0][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw
                dp4 r1.y, r0.xyzw, cb0[9].xyzw
                dp4 r1.z, r0.xyzw, cb0[10].xyzw
                dp4 r1.w, r0.xyzw, cb0[11].xyzw
                mov x0[0].xyzw, r1.xyzw
                
                #line 131
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[0][1].xyzx
                add r0.xyz, r0.xyzx, v[0][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                mov x0[1].xyz, r1.xyzx
                
                #line 132
                dp3 r0.x, v[0][1].xyzx, cb0[4].xyzx
                dp3 r0.y, v[0][1].xyzx, cb0[5].xyzx
                dp3 r0.z, v[0][1].xyzx, cb0[6].xyzx
                mov x0[2].xyz, r0.xyzx
                
                #line 133
                mov x0[3].xyzw, v[0][2].xyzw
                
                #line 134
                mov x0[4].xy, v[0][3].xyxx
                
                #line 135
                mov x0[5].xyz, v[0][4].xyzx
                
                #line 130
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[1][1].xyzx
                add r0.xyz, r0.xyzx, v[1][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw
                dp4 r1.y, r0.xyzw, cb0[9].xyzw
                dp4 r1.z, r0.xyzw, cb0[10].xyzw
                dp4 r1.w, r0.xyzw, cb0[11].xyzw
                mov x0[6].xyzw, r1.xyzw
                
                #line 131
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[1][1].xyzx
                add r0.xyz, r0.xyzx, v[1][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                mov x0[7].xyz, r1.xyzx
                
                #line 132
                dp3 r0.x, v[1][1].xyzx, cb0[4].xyzx
                dp3 r0.y, v[1][1].xyzx, cb0[5].xyzx
                dp3 r0.z, v[1][1].xyzx, cb0[6].xyzx
                mov x0[8].xyz, r0.xyzx
                
                #line 133
                mov x0[9].xyzw, v[1][2].xyzw
                
                #line 134
                mov x0[10].xy, v[1][3].xyxx
                
                #line 135
                mov x0[11].xyz, v[1][4].xyzx
                
                #line 130
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[2][1].xyzx
                add r0.xyz, r0.xyzx, v[2][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw
                dp4 r1.y, r0.xyzw, cb0[9].xyzw
                dp4 r1.z, r0.xyzw, cb0[10].xyzw
                dp4 r1.w, r0.xyzw, cb0[11].xyzw
                mov x0[12].xyzw, r1.xyzw
                
                #line 131
                itof r0.xyz, l(10, 10, 10, 0)
                mul r0.xyz, r0.xyzx, v[2][1].xyzx
                add r0.xyz, r0.xyzx, v[2][0].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                mov x0[13].xyz, r1.xyzx
                
                #line 132
                dp3 r0.x, v[2][1].xyzx, cb0[4].xyzx
                dp3 r0.y, v[2][1].xyzx, cb0[5].xyzx
                dp3 r0.z, v[2][1].xyzx, cb0[6].xyzx
                mov x0[14].xyz, r0.xyzx
                
                #line 133
                mov x0[15].xyzw, v[2][2].xyzw
                
                #line 134
                mov x0[16].xy, v[2][3].xyxx
                
                #line 135
                mov x0[17].xyz, v[2][4].xyzx
                
                #line 138
                mov r0.x, l(0)  // r0.x <- j
                mov r0.y, r0.x  // r0.y <- j
                loop 
                  ilt r0.z, r0.y, l(3)
                  breakc_z r0.z
                
                #line 140
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  add r1.xyz, l(100.000000, 0.000000, 0.000000, 0.000000), v[r0.y + 0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[8].xyzw
                  dp4 r2.y, r1.xyzw, cb0[9].xyzw
                  dp4 r2.z, r1.xyzw, cb0[10].xyzw
                  dp4 r2.w, r1.xyzw, cb0[11].xyzw
                  mov x0[r0.z + 0].xyzw, r2.xyzw
                
                #line 141
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  add r1.xyz, l(100.000000, 0.000000, 0.000000, 0.000000), v[r0.y + 0][0].xyzx
                  mov r1.w, l(1.000000)
                  dp4 r2.x, r1.xyzw, cb0[0].xyzw
                  dp4 r2.y, r1.xyzw, cb0[1].xyzw
                  dp4 r2.z, r1.xyzw, cb0[2].xyzw
                  mov x0[r0.z + 1].xyz, r2.xyzx
                
                #line 142
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  dp3 r1.x, v[r0.y + 0][1].xyzx, cb0[4].xyzx
                  dp3 r1.y, v[r0.y + 0][1].xyzx, cb0[5].xyzx
                  dp3 r1.z, v[r0.y + 0][1].xyzx, cb0[6].xyzx
                  mov x0[r0.z + 2].xyz, r1.xyzx
                
                #line 143
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  mov x0[r0.z + 3].xyzw, v[r0.y + 0][2].xyzw
                
                #line 144
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  mov x0[r0.z + 4].xy, v[r0.y + 0][3].xyxx
                
                #line 145
                  imul null, r0.z, r0.y, l(6)
                  iadd r0.z, r0.z, l(18)
                  mov x0[r0.z + 5].xyz, v[r0.y + 0][4].xyzx
                
                #line 147
                  iadd r0.y, r0.y, l(1)
                endloop 
                
                #line 149
                mov r0.xyzw, x0[0].xyzw
                mov r1.xyz, x0[1].xyzx
                mov r2.xyz, x0[2].xyzx
                mov r3.xyzw, x0[3].xyzw
                mov r4.xy, x0[4].xyxx
                mov r5.xyz, x0[5].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 150
                mov r0.xyzw, x0[6].xyzw
                mov r1.xyz, x0[7].xyzx
                mov r2.xyz, x0[8].xyzx
                mov r3.xyzw, x0[9].xyzw
                mov r4.xy, x0[10].xyxx
                mov r5.xyz, x0[11].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 151
                mov r0.xyzw, x0[12].xyzw
                mov r1.xyz, x0[13].xyzx
                mov r2.xyz, x0[14].xyzx
                mov r3.xyzw, x0[15].xyzw
                mov r4.xy, x0[16].xyxx
                mov r5.xyz, x0[17].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 153
                cut_stream m0
                
                #line 155
                mov r0.xyzw, x0[18].xyzw
                mov r1.xyz, x0[19].xyzx
                mov r2.xyz, x0[20].xyzx
                mov r3.xyzw, x0[21].xyzw
                mov r4.xy, x0[22].xyxx
                mov r5.xyz, x0[23].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 156
                mov r0.xyzw, x0[24].xyzw
                mov r1.xyz, x0[25].xyzx
                mov r2.xyz, x0[26].xyzx
                mov r3.xyzw, x0[27].xyzw
                mov r4.xy, x0[28].xyxx
                mov r5.xyz, x0[29].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 157
                mov r0.xyzw, x0[30].xyzw
                mov r1.xyz, x0[31].xyzx
                mov r2.xyz, x0[32].xyzx
                mov r3.xyzw, x0[33].xyzw
                mov r4.xy, x0[34].xyxx
                mov r5.xyz, x0[35].xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyzw, r3.xyzw
                mov o4.xy, r4.xyxx
                mov o5.xyz, r5.xyzx
                emit_stream m0
                
                #line 159
                cut_stream m0
                
                #line 161
                ret 
                // Approximately 192 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldlnvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // gCubeMap                          texture  float4        cube             t2      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     z 
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                // SV_Target                1   xyzw        1   TARGET   float   xyzw
                // SV_Target                2   xyzw        2   TARGET   float   xyzw
                // SV_Target                3   xyzw        3   TARGET   float   xyzw
                // SV_Target                4   xyzw        4   TARGET   float   xyzw
                // SV_Target                5   xyzw        5   TARGET   float   xyzw
                // SV_Target                6   xyzw        6   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps_siv linear noperspective v0.z, position
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_temps 9
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Color.x; v3.y <- pin.Color.y; v3.z <- pin.Color.z; v3.w <- pin.Color.w; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.tangent.x; v5.y <- pin.tangent.y; v5.z <- pin.tangent.z; 
                //   o6.x <- <PS return value>.Ambient.x; o6.y <- <PS return value>.Ambient.y; o6.z <- <PS return value>.Ambient.z; o6.w <- <PS return value>.Ambient.w; 
                //   o5.x <- <PS return value>.Specular.x; o5.y <- <PS return value>.Specular.y; o5.z <- <PS return value>.Specular.z; o5.w <- <PS return value>.Specular.w; 
                //   o4.x <- <PS return value>.Diffuse.x; o4.y <- <PS return value>.Diffuse.y; o4.z <- <PS return value>.Diffuse.z; o4.w <- <PS return value>.Diffuse.w; 
                //   o3.x <- <PS return value>.Albedo.x; o3.y <- <PS return value>.Albedo.y; o3.z <- <PS return value>.Albedo.z; o3.w <- <PS return value>.Albedo.w; 
                //   o2.x <- <PS return value>.Position.x; o2.y <- <PS return value>.Position.y; o2.z <- <PS return value>.Position.z; o2.w <- <PS return value>.Position.w; 
                //   o1.x <- <PS return value>.Normal.x; o1.y <- <PS return value>.Normal.y; o1.z <- <PS return value>.Normal.z; o1.w <- <PS return value>.Normal.w; 
                //   o0.x <- <PS return value>.Depth.x; o0.y <- <PS return value>.Depth.y; o0.z <- <PS return value>.Depth.z; o0.w <- <PS return value>.Depth.w
                //
                #line 86 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 87
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[0].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- toEyeW.x; r1.y <- toEyeW.y; r1.z <- toEyeW.z
                
                #line 93
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z; r2.w <- litColor.w
                
                #line 97
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 98
                nop 
                mov r3.xyz, r3.xyzx
                mov r4.xyz, r0.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 191 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 194
                mov r4.xyz, r4.xyzx  // r4.x <- N.x; r4.y <- N.y; r4.z <- N.z
                
                #line 195
                dp3 r0.w, r5.zxyz, r4.xyzx
                mul r6.xyz, r4.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 196
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 198
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r4.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r4.y  // r8.z <- TBN._m21
                mov r4.x, r5.y  // r4.x <- TBN._m02
                mov r4.y, r6.z  // r4.y <- TBN._m12
                mov r4.z, r4.z  // r4.z <- TBN._m22
                
                #line 201
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r4.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 203
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 98 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Light.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- NormalW.x; r5.y <- NormalW.y; r5.z <- NormalW.z
                
                #line 106
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                
                #line 107
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                
                #line 108
                sample_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t2.xyzw, s0  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z; r0.w <- reflectionColor.w
                
                #line 109
                add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                
                #line 112
                mov r1.xyz, v1.xyzx  // r1.x <- _psOut.Position.x; r1.y <- _psOut.Position.y; r1.z <- _psOut.Position.z
                mov r1.w, l(1.000000)  // r1.w <- _psOut.Position.w
                
                #line 113
                mov r2.xyz, v0.zzzz  // r2.x <- _psOut.Depth.x; r2.y <- _psOut.Depth.y; r2.z <- _psOut.Depth.z
                mov r2.w, l(1.000000)  // r2.w <- _psOut.Depth.w
                
                #line 114
                mov r0.xyzw, r0.xyzw  // r0.x <- _psOut.Albedo.x; r0.y <- _psOut.Albedo.y; r0.z <- _psOut.Albedo.z; r0.w <- _psOut.Albedo.w
                
                #line 115
                mov r5.xyz, r5.xyzx  // r5.x <- _psOut.Normal.x; r5.y <- _psOut.Normal.y; r5.z <- _psOut.Normal.z
                mov r5.w, l(1.000000)  // r5.w <- _psOut.Normal.w
                
                #line 116
                mov r3.xyzw, cb1[13].xyzw  // r3.x <- _psOut.Diffuse.x; r3.y <- _psOut.Diffuse.y; r3.z <- _psOut.Diffuse.z; r3.w <- _psOut.Diffuse.w
                
                #line 117
                mov r4.xyzw, cb1[14].xyzw  // r4.x <- _psOut.Specular.x; r4.y <- _psOut.Specular.y; r4.z <- _psOut.Specular.z; r4.w <- _psOut.Specular.w
                
                #line 118
                mov r6.xyzw, cb1[12].xyzw  // r6.x <- _psOut.Ambient.x; r6.y <- _psOut.Ambient.y; r6.z <- _psOut.Ambient.z; r6.w <- _psOut.Ambient.w
                
                #line 119
                mov o0.xyzw, r2.xyzw
                mov o1.xyzw, r5.xyzw
                mov o2.xyzw, r1.xyzw
                mov o3.xyzw, r0.xyzw
                mov o4.xyzw, r3.xyzw
                mov o5.xyzw, r4.xyzw
                mov o6.xyzw, r6.xyzw
                ret 
                // Approximately 70 instruction slots used
                            
            };
        }

        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float4x4 gLightWorldViewProj;      // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // $Globals                          cbuffer      NA          NA            cb0      1 
                // cbSkinned                         cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float       
                // WEIGHT                   0   xyz         4     NONE   float   xyz 
                // BONEINDEX                0   xyzw        5     NONE    uint   xyzw
                // TANGENT                  0   xyz         6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[4], immediateIndexed
                dcl_constantbuffer CB1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 9
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.Tex.x; v1.y <- vin.Tex.y; 
                //   v2.x <- vin.NormalL.x; v2.y <- vin.NormalL.y; v2.z <- vin.NormalL.z; 
                //   v3.x <- vin.Color.x; v3.y <- vin.Color.y; v3.z <- vin.Color.z; v3.w <- vin.Color.w; 
                //   v4.x <- vin.BoneWeight.x; v4.y <- vin.BoneWeight.y; v4.z <- vin.BoneWeight.z; 
                //   v5.x <- vin.BoneIndex.x; v5.y <- vin.BoneIndex.y; v5.z <- vin.BoneIndex.z; v5.w <- vin.BoneIndex.w; 
                //   v6.x <- vin.tangent.x; v6.y <- vin.tangent.y; v6.z <- vin.tangent.z; 
                //   o5.x <- <Shadow_VS return value>.tangent.x; o5.y <- <Shadow_VS return value>.tangent.y; o5.z <- <Shadow_VS return value>.tangent.z; 
                //   o4.x <- <Shadow_VS return value>.Tex.x; o4.y <- <Shadow_VS return value>.Tex.y; 
                //   o3.x <- <Shadow_VS return value>.Color.x; o3.y <- <Shadow_VS return value>.Color.y; o3.z <- <Shadow_VS return value>.Color.z; o3.w <- <Shadow_VS return value>.Color.w; 
                //   o2.x <- <Shadow_VS return value>.NormalW.x; o2.y <- <Shadow_VS return value>.NormalW.y; o2.z <- <Shadow_VS return value>.NormalW.z; 
                //   o1.x <- <Shadow_VS return value>.PosW.x; o1.y <- <Shadow_VS return value>.PosW.y; o1.z <- <Shadow_VS return value>.PosW.z; 
                //   o0.x <- <Shadow_VS return value>.PosH.x; o0.y <- <Shadow_VS return value>.PosH.y; o0.z <- <Shadow_VS return value>.PosH.z; o0.w <- <Shadow_VS return value>.PosH.w; 
                //   x0 <- weights
                //
                #line 50 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Shadow.fx"
                itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- _Out.Color.x; r0.y <- _Out.Color.y; r0.z <- _Out.Color.z; r0.w <- _Out.Color.w
                
                #line 51
                itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- _Out.NormalW.x; r1.y <- _Out.NormalW.y; r1.z <- _Out.NormalW.z
                
                #line 52
                itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- _Out.PosW.x; r2.y <- _Out.PosW.y; r2.z <- _Out.PosW.z
                
                #line 53
                itof r3.xyz, l(0, 0, 0, 0)  // r3.x <- _Out.tangent.x; r3.y <- _Out.tangent.y; r3.z <- _Out.tangent.z
                
                #line 54
                itof r4.xy, l(0, 0, 0, 0)  // r4.x <- _Out.Tex.x; r4.y <- _Out.Tex.y
                
                #line 58
                mov x0[0].x, v4.x
                
                #line 59
                mov x0[1].x, v4.y
                
                #line 60
                mov x0[2].x, v4.z
                
                #line 61
                mov r1.w, -v4.x
                add r1.w, r1.w, l(1.000000)
                mov r2.w, -v4.y
                add r1.w, r1.w, r2.w
                mov r2.w, -v4.z
                add r1.w, r1.w, r2.w
                mov x0[3].x, r1.w
                
                #line 63
                mov r5.xyz, l(0,0,0,0)  // r5.x <- posL.x; r5.y <- posL.y; r5.z <- posL.z
                
                #line 66
                mov r1.w, x0[0].x
                itof r2.w, l(0)
                lt r1.w, r2.w, r1.w
                if_nz r1.w
                
                #line 68
                  mov r1.w, l(0)  // r1.w <- i
                  mov r6.xyz, r5.xyzx  // r6.x <- posL.x; r6.y <- posL.y; r6.z <- posL.z
                  mov r2.w, r1.w  // r2.w <- i
                  loop 
                    ilt r3.w, r2.w, l(4)
                    breakc_z r3.w
                
                #line 70
                    mov r3.w, x0[r2.w + 0].x
                    ge r3.w, l(0.000100), r3.w
                    if_nz r3.w
                
                #line 71
                      break 
                    endif 
                
                #line 72
                    mov r3.w, x0[r2.w + 0].x
                    and r7.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                    or r4.zw, r7.yyyw, r7.xxxz
                    or r4.z, r4.w, r4.z
                    imul null, r4.z, r4.z, l(4)
                    mov r7.xyz, v0.xyzx
                    mov r7.w, l(1.000000)
                    dp4 r8.x, r7.xyzw, cb1[r4.z + 0].xyzw
                    dp4 r8.y, r7.xyzw, cb1[r4.z + 1].xyzw
                    dp4 r8.z, r7.xyzw, cb1[r4.z + 2].xyzw
                    mul r7.xyz, r3.wwww, r8.xyzx
                    add r6.xyz, r6.xyzx, r7.xyzx
                
                #line 68
                    iadd r2.w, r2.w, l(1)
                
                #line 74
                  endloop 
                
                #line 75
                else   // Prior locations: r5.x <- posL.x; r5.y <- posL.y; r5.z <- posL.z
                
                #line 78
                  mov r6.xyz, v0.xyzx  // r6.x <- posL.x; r6.y <- posL.y; r6.z <- posL.z
                
                #line 80
                endif 
                
                #line 82
                mov r6.w, l(1.000000)
                dp4 r5.x, r6.xyzw, cb0[0].xyzw  // r5.x <- _Out.PosH.x
                dp4 r5.y, r6.xyzw, cb0[1].xyzw  // r5.y <- _Out.PosH.y
                dp4 r5.z, r6.xyzw, cb0[2].xyzw  // r5.z <- _Out.PosH.z
                dp4 r5.w, r6.xyzw, cb0[3].xyzw  // r5.w <- _Out.PosH.w
                
                #line 84
                mov o0.xyzw, r5.xyzw
                mov o3.xyzw, r0.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r1.xyzx
                mov o5.xyz, r3.xyzx
                mov o4.xy, r4.xyxx
                ret 
                // Approximately 60 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float     z 
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                7   xyzw        7   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps_siv linear noperspective v0.z, position
                dcl_output o7.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Color.x; v3.y <- pin.Color.y; v3.z <- pin.Color.z; v3.w <- pin.Color.w; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.tangent.x; v5.y <- pin.tangent.y; v5.z <- pin.tangent.z; 
                //   o7.x <- <Shadow_PS return value>.x; o7.y <- <Shadow_PS return value>.y; o7.z <- <Shadow_PS return value>.z; o7.w <- <Shadow_PS return value>.w
                //
                #line 91 "E:\GA3rdFinalProject_DUOL\5_Project\DUOLEffectEditor\EffectToolDemo\GraphicsEngine\Shader\FX\Shadow.fx"
                mov o7.xyz, v0.zzzz
                mov o7.w, l(1.000000)
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

}

